Ques 1):- Split an array into two equal Sum subarrays (GFG):-
Ans:
bool canSplit(vector<int>& arr) {
        // code here
        int total_sum = 0;
        for(int i=0;i<arr.size();i++)
        {
            total_sum += arr[i];
        }
        
        
        int prefix = 0;
        for(int i=0;i<arr.size()-1;i++)
        {
            prefix += arr[i];
            int ans = total_sum-prefix;
            if(ans == prefix)
            return true;
        }
        return false;
    }
*********************************************************************************************************************************************************************
Ques 2):- Largest sum of a contagious subarray (GFG) :-
Ans:
 int maxSubarraySum(vector<int> &arr) {
        // Your code here
        
        int maxi = INT_MIN;
        
        int prefix = 0;
        for(int i=0;i<arr.size();i++)
        {
            prefix += arr[i];
            
            maxi = max(prefix,maxi);
            
            if(prefix < 0)
            prefix = 0;
            
        }
        return maxi;
    }
********************************************************************************************************************************************************
Ques 3):- Best time to buy and sell stock (Leetcode):-
Ans:
int maxProfit(vector<int>& prices) {
        int maxi = 0;
        int min_price = INT_MAX;

        for(int i=0;i<prices.size();i++)
        {
            min_price = min(min_price,prices[i]);
            int profit = prices[i] - min_price;

            maxi = max(maxi,profit);
        }
        return maxi;
    }
***********************************************************************************************************************************************************
Ques 4) :- Print All Subrray of given Array :-
Ans:
void printSubarrays(int numbers[]) {
       for (int i = 0; i < numbers.length; i++) {
            for (int j = i; j < numbers.length; j++) {
                for (int k = i; k <= j; k++) {
                    cout<<numbers[k]<< " ";
                }
                cout<<endl;
            }
            cout<<endl;
        }
    }
*************************************************************************************************************************************************
Ques 5) :- Maximum prefix sum for a given range (GFG):-
Ans:
vector<int> maxPrefixes(vector<int>& arr, vector<int>& leftIndex,
                            vector<int>& rightIndex) {
        // code here.
        vector<int> ans;
        
        for(int i=0;i<leftIndex.size();i++)
        {
            int max = INT_MIN;
            
            int prefix = 0;
            for(int j=leftIndex[i]; j<=rightIndex[i];j++)
            {
                prefix += arr[j];
                if(prefix > max)
                max = prefix;
            }
            ans.push_back(max);
        }
        return ans;
    }
********************************************************************************************************************************************************************
Ques 6) :- Find the Highest Altitude (Leetcode) :-
ANs:
int largestAltitude(vector<int>& gain) {

        int max = 0;
        int sum = 0;
        for(int i=0;i<gain.size();i++)
        {
            sum += gain[i];
            if(sum > max)
            max= sum;

        }
        return max;
        
    }
******************************************************************************************************************************************************************
Ques 7):- Trapping Rain Water (Leetcode):-
Ans:
class Solution {
public:
    //------------------Optimize approach:- O(N) and O(1)--------------------------------------
    int trap(vector<int>& height) {
       
        int max_wall_index = -1;//find the maximum height wall and store that index number
        //so, left se iterate krte waqt rightmax ki chinta nhi krna and same vice-versa
        int max = -1;
        for(int i=0;i<height.size();i++)
        {
            if(height[i]>max)
            {
            max= height[i];
            max_wall_index = i;

            }
        }
        int water = 0;
        int leftmax = -1;

        for(int i=0;i<=max_wall_index;i++)
        {
            if(leftmax > height[i])
            {
                water += (leftmax-height[i]);
            }
            else
            {
                leftmax= height[i];
            }
        }
        
        int rightmax = -1;
        for(int i=height.size()-1;i>max_wall_index;i--)
        {
            if(rightmax > height[i])
            {
                water += (rightmax-height[i]);
            }
            else
            rightmax = height[i];
        }
        return water;





        
    }
};
 
